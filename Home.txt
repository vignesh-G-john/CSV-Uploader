Thread Sechduler is a part of JVM that decides which thread should run

Thread Sechuler mainly uses preemptive scheduling and time slicing

sleep :
------
It used to sleep a thread for specific amount of time.
This methods throws an exception that is Interrupted Exception

can we start a thread twice?
	No. After starting a thread, it can never be started again. If you does so, an IllegalThreadStateException 
	is thrown. In such case, thread will run once but for second time, it will throw exception.
	
class TwiceStarted extends Thread
{
	public void run()
	{
		System.out.println("Running run methods....");
	}
	public static void main(String args[])
	{
		TwiceStarted t1 = new TwiceStarted();
		t1.start();
		t1.start();
	}
}

class ThreadSleep extends Thread
{
	public void run()
	{
		for(int i=0;i<5;i++){
			try{
				Thread.sleep(200);
			}catch(InterruptedException message){
				System.out.println("Exception +"message);
			}
			System.out.println(i+" ");
		}
	}
	public static void main(String args[])
	{
		ThreadSleep t1 = new ThreadSleep();
		ThreadSleep t2 = new ThreadSleep();
		t1.start();
		t2.start();
	}
}

Synchronization :
	Synchronization in java is the capability to control the access of multiple threads to any shared resource.
	
class Table{  
void printTable(int n){//method not synchronized  
   for(int i=1;i<=5;i++){  
     System.out.println(n*i);  
     try{  
		Thread.sleep(400);  
     }
	 catch(Exception e){
		System.out.println(e);
	 }  
   }  
 }  
} 
  
class MyThread1 extends Thread{  
	Table t;  
	MyThread1(Table t){  
	this.t=t;  
	}  
	public void run(){  
		t.printTable(5);  
	}  
}  

class MyThread2 extends Thread{  
	Table t;  
	MyThread2(Table t){  
		this.t=t;  
	}  
	public void run(){  
		t.printTable(100);  
	}  
}  
  
class TestSynchronization1{  
	public static void main(String args[]){  
		Table obj = new Table();//only one object  
		MyThread1 t1=new MyThread1(obj);  
		MyThread2 t2=new MyThread2(obj);  
		t1.start();  
		t2.start();  
	}  
}  